{
  "tooltips": [
    {
      "id": "jvmVendor",
      "tooltip": "JVM Vendor"
    },
    {
      "id": "jdkVersion",
      "tooltip": "JDK Version"
    },
    {
      "id": "heapSize",
      "tooltip": "Heap Size"
    },
    {
      "id": "permSize",
      "tooltip": "Perm Size"
    },
    {
      "id": "metaSpace",
      "tooltip": "Meta space"
    },
    {
      "id": "gcCollector",
      "tooltip": "GC Collector Algorithm"
    },
    {
      "id": "g1gc-maxGCPauseTime",
      "tooltip": "Sets a target for the maximum GC pause time. This is a soft goal, and the JVM will make its best effort to achieve it."
    },
    {
      "id": "g1gc-InitiatingHeapOccupancyPercent",
      "tooltip": "Percentage of the (entire) heap occupancy to start a concurrent GC cycle. It is used by GCs that trigger a concurrent GC cycle based on the occupancy of the entire heap, not just one of the generations (e.g., G1). A value of 0 denotes 'do constant GC cycles'. The default value is 45."
    },
    {
      "id": "g1gc-NewRatio",
      "tooltip": "Ratio of old/new generation sizes. The default value is 2."
    },
    {
      "id": "g1gc-SurvivorRatio",
      "tooltip": "Ratio of eden/survivor space size. The default value is 8."
    },
    {
      "id": "g1gc-MaxTenuringThreshold",
      "tooltip": "Maximum value for tenuring threshold. The default value is 15."
    },
    {
      "id": "g1gc-ParallelGCThreadse",
      "tooltip": "Sets the number of threads used during parallel phases of the garbage collectors. The default value varies with the platform on which the JVM is running."
    },
    {
      "id": "g1gc-ConcGCThreads",
      "tooltip": "Number of threads concurrent garbage collectors will use. The default value varies with the platform on which the JVM is running."
    },
    {
      "id": "g1gc-G1ReservePercent",
      "tooltip": "Sets the amount of heap that is reserved as a false ceiling to reduce the possibility of promotion failure. The default value is 10."
    },
    {
      "id": "g1gc-G1HeapRegionSize",
      "tooltip": "With G1 the Java heap is subdivided into uniformly sized regions. This sets the size of the individual sub-divisions. The default value of this parameter is determined ergonomically based upon heap size. The minimum value is 1Mb and the maximum value is 32Mb."
    },
    {
      "id": "printGCDetails",
      "tooltip": "Print GC Details"
    },
    {
      "id": "enableGCLogRotation",
      "tooltip": "Enable GC Log Rotation"
    },
    {
      "id": "heapDumpOnOOMemory",
      "tooltip": "Heap dump on OutOfMemory Error"
    },
    {
      "id": "enableErrorFile",
      "tooltip": "If an error occurs, save the error data to this file."
    },  
    {
      "id": "verboseJNI",
      "tooltip": "When a JNI or native method is resolved, the HotSpot VM prints a trace message to the application console (standard output). It also prints a trace message when a native method is registered using the JNI RegisterNative function. "
    },
    {
      "id": "verboseGC",
      "tooltip": "The -verbose:gc option enables logging of garbage collection (GC) information. It can be combined with other HotSpot VM specific options such as -XX:+PrintGCDetails and -XX:+PrintGCTimeStamps to get further information about the GC. The information output includes the size of the generations before and after each GC, total size of the heap, the size of objects promoted, and the time taken."
    },
    {
      "id": "verboseClass",
      "tooltip": "The -verbose:class option enables logging of class loading and unloading."
    },
    {
      "id": "printGCApplicationConcurrentTime",
      "tooltip": "Print the time the application has been running"
    },
    {
      "id": "printGCApplicationStoppedTime",
      "tooltip": "Print the time the application has been stopped"
    },
    {
      "id": "printAssembly",
      "tooltip": "Print assembly code for bytecoded and native methods."
    },
    {
      "id": "printClassHistogram",
      "tooltip": "Print a histogram of class instances"
    },
    {
      "id": "printConcurrentLocks",
      "tooltip": "Print java.util.concurrent locks in thread dump"
    }
  ]
}
